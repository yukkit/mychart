# Default values for linkoopdb.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: 192.168.1.79:5000/linkoopdb
  tag: v2.3.0-latest
  pullPolicy: Always
  imagePullSecrets:

#hostNetwork: false

shareDisk: /tmp/linkoopdb

hadoop:
  dependecy: true
  user: hdfs
  confPath:
    conf: /etc/hadoop/conf
#   hdp: /etc/hadoop/hdp

license:
  type: datapps
  host: license.datapps.com
  port: 7700

nfs:
  create: true
  mountPath:
  storage:
  path:
  node:
  reclaimPolicy:

#ldbDist:
#  - domain:
#    port:
#    node:
#    rootPath:

shuffleService:
  create: true
  localDir:
    disk1: /tmp/spark-local
  resources:
    limits: {}
    requests: {}

metastore:
  type:
  replicas:
  nodeAffinity:
    key: linkoopdb/metaserver
    value: true
  storage:
    nodeAffinity:
      key: linkoopdb/metastorage
      value: true
  config:
    url:
    username:
    password:
    driver:
    batchWorkerUiPort:
    jvmOpts:
    resources:
      master:
        memory:
      taskmanger:
        memory:
        cpuCores:
        number:
  resources:
    limits: {}
    requests: {}

server:
  replicas:
  nodeAffinity:
    key: linkoopdb/dbserver
    value: true
  ports:
    jdbcPort:
    regPort:
    atomixPort:
    syncPort:
  config:
    storageBase:
    batchWorkerJars:
    sqlLogEnabled:
    sqlHistoryEnabled:
    batchWorkerUiPort:
    jvmOpts:
    hiveMetastoreUris:
    enableHiveSupport:
    keytab:
  resources:
    limits: {}
    requests: {}

batchWorker:
  launcher:
  resources:
    cluster:
      queue:
      totalMemory:
      totalCpuCores:
      numNodes:
      numExecutorsPerHost:
      totalGpuCores:
    master:
      memory:
    taskmanger:
      memory:
      cpuCores:
      number:
      gpuCores:
  config:
    jvmOpts:

stream:
  create: true
  nodeAffinity:
    key: linkoopdb/stream
    values: true
  config:
  streamWorker:
    kafkaLibPath:
    libPath:
    ports:
      workerPort:
    resources:
      limits: {}
      requests: {}
  debugWorker:
    replicas:
    ports:
      workerPort:
    resources:
      limits: {}
      requests: {}
  jobmanager:
    ports:
      ui:
    resources:
      limits: {}
      requests: {}
  taskmanager:
    replicas:
    resources:
      limits: {}
      requests: {}

monitor:
  create: false

studio:
  create: false
